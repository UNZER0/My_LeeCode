public class Main {
    public static void main(String[] args) {
        char[][] matrix = {
                {'0', '1', '1', '0', '1'},
                {'1', '1', '0', '1', '0'},
                {'0', '1', '1', '1', '0'},
                {'1', '1', '1', '1', '0'},
                {'1', '1', '1', '1', '1'},
                {'0', '0', '0', '0', '0'},
        };
/*        char[][] matrix = {
                {'1', '0',},
                {'0', '1',}
        };*/
        Solution solution = new Solution();
        System.out.println(solution.maximalSquare(matrix));
    }
}

class Solution {
    public int maximalSquare(char[][] matrix) {
        int ans = 0;
        //特判
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return ans;
        }
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                if (matrix[i][j] == '1') {
                    ans = Math.max(ans, 1);
                    //进一步判断周围
                    //算出来能扩展几步
                    int side = Math.min(matrix.length - i - 1, matrix[0].length - j - 1);
                    //判断右下角
                    for (int k = 1; k <= side; k++) {
                        if (matrix[i + k][j + k] == '1') {
                            boolean flag = true;
                            //是1J就继续判断
                            //从左向右、从上向下逐渐逼近右下角
                            for (int l = 0; l <= k; l++) {
                                if (matrix[i + k][j + l] == '0' || matrix[i + l][j + k] == '0') {
                                    flag = false;
                                    break;
                                }
                            }
                            if (flag) {
                                //并且不断更新最大的边长
                                ans = Math.max(ans, k + 1);
                            }else {
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }
            }
        }
        return ans * ans;
    }
}

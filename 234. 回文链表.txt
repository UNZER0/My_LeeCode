public class Main2 {
    public static void main(String[] args) {
        ListNode listNode = new ListNode(1);
        listNode.next = new ListNode(2);
        listNode.next.next = new ListNode(3);
        listNode.next.next.next = new ListNode(2);
        Solution solution = new Solution();
        System.out.println(solution.isPalindrome(listNode));
    }
}

class ListNode {
    int val;
    ListNode next;

    ListNode(int x) {
        val = x;
    }
}

class Solution {
    public boolean isPalindrome(ListNode head) {
        //特判
        if (head == null || head.next == null) {
            return true;
        }
        //来个快慢指针
        ListNode fast=head;
        ListNode slow=head;
        while (fast!=null&&fast.next!=null){
            //慢的走一步
            slow=slow.next;
            //快的走一步
            fast=fast.next;
            //如果还能走
            if (fast!=null){
                fast=fast.next;
            }
        }
        //fast不空说明是奇数个
        if (fast!=null){
            //因此需要再走一步
            slow=slow.next;
        }
        //来个头结点
        ListNode head2=slow;
        //反转后边的链表
        while (slow.next!=null){
            ListNode tmp=slow.next;
            //断开
            slow.next=tmp.next;
            //插入
            tmp.next=head2;
            //更新头结点
            head2=tmp;
        }
        //比较
        while (head2!=null){
            if (head.val!=head2.val){
                return false;
            }
            head=head.next;
            head2=head2.next;
        }
        return true;
    }
}
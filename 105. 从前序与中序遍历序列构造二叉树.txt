import java.util.HashMap;

class Main {
    public static void main(String[] args) {
        int[] preorder = {3, 1, 2, 4};
        int[] inorder = {1, 2, 3, 4};
        Solution solution = new Solution();
        TreeNode node = solution.buildTree(preorder, inorder);
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) {
        val = x;
    }
}

class Solution {
    private int index = 0;
    private HashMap<Integer, Integer> map;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if (preorder == null || preorder.length == 0) {
            return null;
        }
        //构建一个map，方便查找preorder中当前元素对应inorder中的位置
        map = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            map.put(inorder[i],i);
        }
        return dfs(preorder,  0, inorder.length - 1);
    }

    public TreeNode dfs(int[] preorder,  int i, int j) {
        if (i > j || index > preorder.length - 1) {
            return null;
        }
        //每添加一个新的结点，index向后移动一位，为了避免回溯后index发生回退，设置为成员变量！
        TreeNode treeNode = new TreeNode(preorder[index]);
        //找到当前节点所在inorder的位置
        int mid = map.get(preorder[index++]);
        //构造左子树
        treeNode.left = dfs(preorder, i, mid - 1);
        //构造右子树
        treeNode.right = dfs(preorder,  mid + 1, j);
        return treeNode;
    }
}




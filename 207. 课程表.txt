import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
    public static void main(String[] args) {
        int[][] num = {
                {1, 0},
                {2, 0},
        };
        Solution solution = new Solution();
        System.out.println(solution.canFinish(3, num));
    }
}

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        //特判
        if (numCourses == 1) {
            return true;
        }
        if (prerequisites == null || prerequisites.length == 0) {
            return true;
        }
        if (prerequisites.length == 1) {
            return true;
        }
        //初始化工作
        //入度表
        int[] indegrees = new int[numCourses];
        //度为0的元素
        Queue<Integer> queue = new LinkedList<>();
        //一对多的数组列表，用于存放每个元素的所有后继
        HashSet<Integer>[] sets = new HashSet[numCourses];
        for (int i = 0; i < sets.length; i++) {
            sets[i] = new HashSet<>();
        }
        //初始化入度表和元素后继
        for (int[] prerequisite : prerequisites) {
            indegrees[prerequisite[0]]++;
            sets[prerequisite[1]].add(prerequisite[0]);
        }
        //入度为0的元素入队
        for (int i = 0; i < indegrees.length; i++) {
            if (indegrees[i] == 0) {
                queue.add(i);
            }
        }
        int flag = 0;
        //开始拓扑排序
        while (!queue.isEmpty()) {
            //弹出一个元素
            int element = queue.poll();
            //这个元素的所有后继的入度-1
            for (int next : sets[element]) {
                indegrees[next]--;
                if (indegrees[next] == 0) {
                    //这块出错了，下次注意
                    queue.add(next);
                }
            }
            flag++;
        }
        return flag == numCourses;
    }
}
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args){
        int[] num={1,2,2,3};
        Solution solution = new Solution();
        List<List<Integer>> lists = solution.combinationSum(num, 3);
        System.out.println(lists.toString());
    }
}

class Solution {
    List<List<Integer>> list = new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        //特判
        if (candidates==null||candidates.length==0||target<0){
            return list;
        }
        //进入回溯
        backTrack(candidates,target,new ArrayList<>(),0);
        return list;
    }

    public void backTrack(int[] candidates, int target,List<Integer> l,int start){
        //遍历到了最下层结点，返回
        if (target==0){
            //为什么要new一个呢？因为后边又进行了remove操作，他们引用的同一个对象！！
            list.add(new ArrayList<>(l));
            return;
        }
        //该路径上不满足条件，返回
        if (target<0){
            return;
        }
        //进入循环，为什么用start呢？因为从start开始可以避免重复！
        for (int i = start; i < candidates.length; i++) {
            //操作
            l.add(candidates[i]);
            //回溯
            backTrack(candidates,target-candidates[i],l,i);
            //撤销操作
            l.remove(l.size()-1);
        }
    }
}
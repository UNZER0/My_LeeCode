public class Main {
    public static void main(String[] args) {
        int[] num = {1, 5, 11, 5};
        Solution solution = new Solution();
        System.out.println(solution.canPartition(num));
    }
}

class Solution {
    public boolean canPartition(int[] nums) {
        if (nums==null||nums.length<=1){
            return false;
        }
        if (nums.length==2){
            return nums[0]==nums[1];
        }
        //统计所有元素和
        int sum=0;
        for (int num : nums) {
            sum+=num;
        }
        //如果是奇数那就不行
        if (sum%2==1){
            return false;
        }
        sum=sum/2;
        //填入边界值
        boolean[][] dp= new boolean[nums.length][sum + 1];
        //第一列
        for (int i = 0; i < nums.length; i++) {
            dp[i][0]= true;
        }
        //第一行
        if (nums[0]<=sum){
            dp[0][nums[0]]=true;
        }
        //填dp
        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[i].length; j++) {
                //如果当前元素小于等于背包容量，那么有两种选择
                if (nums[i]<=j){
                    dp[i][j]=dp[i-1][j]||dp[i-1][j-nums[i]];
                }else {
                    //否则，只有一种选择，那就是不把当前元素放入背包
                    dp[i][j]=dp[i - 1][j];
                }
            }
        }
        return dp[nums.length-1][sum];
    }
}